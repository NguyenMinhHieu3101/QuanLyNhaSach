<UserControl x:Class="UngDungQuanLyNhaSach.Controls.MenuWithSubMenuControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:UngDungQuanLyNhaSach.Controls"
             mc:Ignorable="d" x:Name="this" Background="WhiteSmoke">

    <UserControl.Resources>
        <Thickness x:Key="DefaultSubMenuPadding" Left="10"/>

        <Style x:Key="MenuTextStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>

            <!--to change fore ground on MouseOver and Menu Item Selection-->
            <Style.Triggers>
                
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                
            </Style.Triggers>
            
        </Style>
        
        <Style x:Key="ItemMenuTextStyle" TargetType="{x:Type TextBlock}">
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Padding" Value="20,0,0,0"/>
            <Setter Property="TextTrimming" Value="CharacterEllipsis"/>

            <!--to change fore ground on MouseOver and Menu Item Selection-->
            <Style.Triggers>
                
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                    <!--<Setter Property="Background" Value="#34AE98"/>-->
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="#515EC1"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Foreground" Value="Black"/>
                </DataTrigger>
                
            </Style.Triggers>
            
        </Style>

        <Style x:Key="MenuButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Height" Value="50"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="#383535"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                
                <Setter.Value>
                    
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        
                        <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                            <!--Adding Icon & Text in our Button-->
                            <Grid Margin="10,0,5,0">
                                
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="50"/>
                                </Grid.ColumnDefinitions>

                                <!--Menu Text-->
                                <TextBlock Style="{StaticResource MenuTextStyle}" Text="{TemplateBinding Content}"/>

                                <!--#region Menu Icon-->
                                <Grid Width="30" Margin="10,0,10,0" Grid.Column="1">

                                    <!--#region Optional Hide/Show Menu Icon-->
                                    <Grid.Style>
                                        
                                        <Style TargetType="{x:Type Grid}">
                                            
                                            <Style.Triggers>
                                                
                                                <DataTrigger Binding="{Binding HasIcon, ElementName=this, TargetNullValue=False, FallbackValue=False}" Value="False">
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </DataTrigger>
                                                
                                            </Style.Triggers>
                                            
                                        </Style>
                                        
                                    </Grid.Style>
                                    <!--#endregion-->
                                    
                                    <Image HorizontalAlignment="Right" Source="{Binding PathData}" Height="15" Width="15" />

                                </Grid>
                                <!--#endregion-->

                            </Grid>
                            
                        </Border>
                        
                        <ControlTemplate.Triggers>
                            <!--setting default selection to dashboard button on Application startup-->
                            <Trigger Property="Content" Value="Dashboard">
                                <Setter Property="IsChecked" Value="True"/>
                            </Trigger>
                            
                        </ControlTemplate.Triggers>
                        
                    </ControlTemplate>
                    
                </Setter.Value>
                
            </Setter>
            
        </Style>
        
        <Style x:Key="ItemMenuButtonStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Height" Value="50"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>

            <Setter Property="Template">
                
                <Setter.Value>
                    
                    <ControlTemplate TargetType="{x:Type ToggleButton}">

                        <Border Background="{TemplateBinding Background}" 
                                BorderThickness="{TemplateBinding BorderThickness}">

                            <TextBlock Style="{StaticResource ItemMenuTextStyle}" 
                                       Text="{TemplateBinding Content}"/>

                        </Border>
                        
                        <ControlTemplate.Triggers>
                            <!--setting default selection to dashboard button on Application startup-->
                            <Trigger Property="Content" Value="Dashboard">
                                <Setter Property="IsChecked" Value="True"/>
                            </Trigger>
                            
                        </ControlTemplate.Triggers>
                        
                    </ControlTemplate>
                    
                </Setter.Value>
                
            </Setter>

            <Style.Triggers>

                <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBoxItem}}" Value="True">
                    <Setter Property="Background" Value="#34AE98"/>
                </DataTrigger>

            </Style.Triggers>

        </Style>

        <!--#region Customizing Listbox & ListboxItems-->
        <Style TargetType="{x:Type ListBox}">
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Background" Value="White"/>
            <Setter Property="SelectionMode" Value="Single"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="SelectedIndex" Value="0"/>
            <Style.Triggers>
                <!--To Hide SubMenu List When the Parent Menu button is Unchecked-->
                <DataTrigger Binding="{Binding IsChecked, ElementName=Menu}" Value="False">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <!--And also to hide when the SubMenu List coming from our ViewModel is null-->
                <DataTrigger Binding="{Binding SubMenuList}" Value="{x:Null}">
                    <Setter Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type ListBoxItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Height" Value="50"/>
            <Setter Property="Template">

                <Setter.Value>

                    <ControlTemplate TargetType="{x:Type ListBoxItem}">

                        <Border Padding="{Binding SubMenuPadding, ElementName=this, FallbackValue={StaticResource DefaultSubMenuPadding}, TargetNullValue={StaticResource DefaultSubMenuPadding}}">

                            <!--You might be thinking why we are using RadioButton instead of Normal Button here... Well, there are 2 reasons for that
                    1) Radio Buttons have GroupName property which will help us achieve one selection of button at a time.. i will show you later what 
                    i mean by that...
                    2) Radio buttons have IsChecked property which we can use to benefit for collapsing / showing our SubMenus
                            
                            ;)
                    -->
                            <RadioButton
                                x:Name="SMenuButton"
                                GroupName="SubMenu"
                                Style="{StaticResource ItemMenuButtonStyle}"
                                Content="{Binding SubMenuText, FallbackValue=ItemMenuText, TargetNullValue=ItemMenuText}"
                                Command="{Binding SubMenuCommand}"/>
                        </Border>

                        <ControlTemplate.Triggers>
                            <!--To select ListboxItem when our button is in Checked State-->
                            <DataTrigger Binding="{Binding IsChecked, ElementName=SMenuButton}" Value="True">
                                <Setter Property="IsSelected" Value="True"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>

                    </ControlTemplate>

                </Setter.Value>

            </Setter>

        </Style>
        <!--#endregion-->
    </UserControl.Resources>
    
    <ItemsControl ItemsSource="{Binding MenuList}"
        ScrollViewer.VerticalScrollBarVisibility="Disabled"
        ScrollViewer.HorizontalScrollBarVisibility="Disabled">
        
        <ItemsControl.ItemTemplate>
            
            <DataTemplate>
                
                <StackPanel>
                    <!--Main Menu Button-->
                    <!--You might be thinking why we are using RadioButton instead of Normal Button here... Well, there are 2 reasons for that
                    1) Radio Buttons have GroupName property which will help us achieve one selection of button at a time.. i will show you later what 
                    i mean by that...
                    2) Radio buttons have IsChecked property which we can use to benefit for collapsing / showing our SubMenus
                    -->
                    <RadioButton x:Name="Menu"
                                 Content="{Binding MenuText}"
                                 GroupName="MainMenu"
                                 Style="{StaticResource MenuButtonStyle}"
                                 Command="{Binding Command}"/>

                    <!--Sub Menu Listbox-->
                    <ListBox
                        ItemsSource="{Binding SubMenuList}"
                        ScrollViewer.VerticalScrollBarVisibility="Disabled"
                        ScrollViewer.HorizontalScrollBarVisibility="Disabled"                       
                        />

                    <!--We are not getting the SubMenu Text becuase we didnt bind SubMenuText property to our ListboxItem content yet-->
                </StackPanel>
                
            </DataTemplate>
            
        </ItemsControl.ItemTemplate>
        
    </ItemsControl>
    
</UserControl>
